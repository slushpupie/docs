{
  "openapi": "3.0.0",
  "info": {
    "description": "Voice Registry System (VRS) service to perform various operation in enabling the standard and platform-agnostic location for voice.",
    "version": "1.0.2",
    "title": "voice-registry-system-v1",
    "termsOfService": "https://github.com/open-voice-network/docs/blob/master/components/voice_registry_system_terms.md",
    "contact": {
      "email": "vrs-team@ovn.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "records",
      "description": "Manage everything about records in VRS",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://github.com/open-voice-network/docs/blob/master/components/voice_registry_system.md"
      }
    },
    {
      "name": "locations",
      "description": "Manage everything about location",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://github.com/open-voice-network/docs/blob/master/components/voice_registry_system.md"
      }
    }
  ],
  "paths": {
    "/": {
      "post": {
        "x-success_http_code": "201",
        "x-expected_tps": "100",
        "tags": [
          "records"
        ],
        "summary": "Create new records",
        "description": "Add or register in VRS",
        "operationId": "create_record",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_record"
              }
            }
          },
          "description": "Fields below are accepted for registry"
        },
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "The consumer's valid API key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "items": {
                    "$ref": "#/components/schemas/create_record"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "405": {
            "description": "Request made with incorrect method e.g. POST when only GET is allowed"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/{record_id}": {
      "get": {
        "x-success_http_code": "200",
        "x-expected_tps": "100",
        "tags": [
          "records"
        ],
        "summary": "Find by record ID",
        "description": "Returns a single record",
        "operationId": "get_record",
        "parameters": [
          {
            "in": "path",
            "name": "record_id",
            "description": "Unique identifier for the record",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "ef7d274e-d5e5-11e7-9296-cec278b6b50a"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/record"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Record not found"
          },
          "405": {
            "description": "Request made with incorrect method e.g. POST when only GET is allowed"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "put": {
        "tags": [
          "records"
        ],
        "summary": "Update record",
        "description": "",
        "operationId": "update_record",
        "parameters": [
          {
            "in": "path",
            "name": "record_id",
            "description": "Unique identifier for the record",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "ef7d274e-d5e5-11e7-9296-cec278b6b50a"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/record"
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/record"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Record not found"
          },
          "405": {
            "description": "Request made with incorrect method e.g. POST when only GET is allowed"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "delete": {
        "tags": [
          "records"
        ],
        "summary": "Deletes a record",
        "description": "",
        "operationId": "delete_record",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "example": "SJHDSJHJN-JSHDJHSD-AISK12"
            }
          },
          {
            "in": "path",
            "name": "record_id",
            "description": "Unique identifier for the record",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "ef7d274e-d5e5-11e7-9296-cec278b6b50a"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Record not found"
          }
        },
        "security": [
          {
            "vrs_record_auth": [
              "write:records",
              "read:records"
            ]
          }
        ]
      }
    },
    "/search": {
      "get": {
        "tags": [
          "records"
        ],
        "summary": "Search record by name",
        "description": "",
        "operationId": "search_record",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string",
              "description": "Invocation name for the record",
              "example": "patrick dessert"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/record"
                  }
                }
              }
            }
          }
          "404": {
            "description": "Record not found"
          },
          "405": {
            "description": "Request made with incorrect method e.g. POST when only GET is allowed"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about VRS",
    "url": "https://github.com/open-voice-network/docs/blob/master/components/voice_registry_system.md"
  },
  "servers": [
    {
      "url": "https://api.openvoicenetwork.org/voice-registry-system/v1"
    }
  ],
  "components": {
    "requestBodies": {
      "record": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/record"
            }
          }
        },
        "description": "Record that needs to be updated",
        "required": true
      }
    },
    "schemas": {
      "record": {
        "type": "object",
        "description": "Record object",
        "properties": {
          "record_id": {
            "type": "string",
            "description": "Unique identifier for the record",
            "format": "uuid",
            "example": "ef7d274e-d5e5-11e7-9296-cec278b6b50a"
          },
          "name": {
            "type": "string",
            "description": "Invocation name for the record",
            "example": "patrick dessert"
          },
          "url": {
            "type": "string",
            "description": "URL voice record",
            "example": "voice://patrickdessert.com/voice_assistant/"
          },
          "registered_date": {
            "type": "string",
            "description": "Record registration date",
            "format": "date-time"
          },
          "expiration_date": {
            "type": "string",
            "description": "Record expiration date",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Record validity status",
            "enum": [
              "registered",
              "pending",
              "cancelled",
              "expired"
            ]
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/record_location"
            }
          },
          "conversation_platforms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/conversation_platform"
            }
          }
        }
      },
      "create_record": {
        "type": "object",
        "required": [
          "name",
          "categories",
          "locations",
          "conversation_platforms"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Invocation name for the record",
            "example": "patrick dessert"
          },
          "url": {
            "type": "string",
            "description": "URL voice record",
            "example": "voice://patrickdessert.com/voice_assistant/"
          },
          "status": {
            "type": "string",
            "description": "Record validity status",
            "enum": [
              "registered",
              "pending",
              "cancelled",
              "expired"
            ]
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/record_location"
            }
          },
          "conversation_platforms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/conversation_platform"
            }
          }
        }
      },
      "delete_record": {
        "type": "object",
        "required": [
          "name",
          "categories",
          "locations",
          "conversation_platforms"
        ],
        "properties": {
          "record_id": {
            "type": "string",
            "description": "Unique identifier for the record",
            "format": "uuid",
            "example": "ef7d274e-d5e5-11e7-9296-cec278b6b50a"
          },
          "conversation_platforms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/conversation_platform"
            }
          }
        }
      },
      "record_location": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the location id",
            "format": "uuid",
            "example": "ef7d274e-d5e5-11e7-9296-cec278b6b50a"
          },
          "neighborhood": {
            "type": "string",
            "description": "Neigborhood where record is located"
          },
          "city": {
            "type": "string",
            "description": "City where record is located"
          },
          "state": {
            "type": "string",
            "description": "State where record is located"
          },
          "country": {
            "type": "string",
            "description": "Country where record is located",
            "enum": [
              "United States of America",
              "United Kingdom",
              "Philippines",
              "..."
            ]
          }
        }
      },
      "conversation_platform": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the conversation platform",
            "format": "uuid",
            "example": "ef7d274e-d5e5-11e7-9296-cec278b6b50a"
          },
          "name": {
            "type": "string",
            "description": "Conversation platform name",
            "example": "retail"
          },
          "default": {
            "type": "boolean",
            "description": "The default conversation partner",
            "example": true
          },
          "url": {
            "type": "string",
            "description": "Url of the conversational platform",
            "example": "https://api.patrickdessert.com/conversation_platform/v1"
          },
          "type": {
            "type": "string",
            "description": "Conversation platform type whether it is owned or third-party",
            "enum": [
              "owned",
              "third-party"
            ]
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "vrs_record_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://api.openvoicenetwork.org/voice-registry-system/oauth",
      "flow": "implicit",
      "scopes": {
        "write:records": "update records",
        "read:records": "read records"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  }
}
